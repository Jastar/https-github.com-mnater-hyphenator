#summary Silbentrennung und HTML

= Silbentrennung und HTML =
[http://code.google.com/p/hyphenator/wiki/1HyphenationInHTML Englisch version available]

== Übersicht ==
Dieser Artikel zeigt auf,
  * warum und wann man Silbentrennung braucht,
  * weshalb es keine gute automatische Silbentrennung geben kann,
  * wie man diese gemäss HTML-Standard manuell durchführen kann,
  * was der CSS 3-Standard für die Zukunft vorsieht,
und 
  * weshalb eine automatische Silbentrennung trotzdem cool sein kann.
  
Wie so eine Silbentrennung aussehen kann, die im Browser vorgenommen wird, steht im [http://code.google.com/p/hyphenator/wiki/2AutomatischeSilbentrennungMitJS folgenden Artikel].

== `text-align:justify; vs. text-align:left;` ==
Falls nichts anderes eingestellt wird, werden Texte in Webbrowsern linksbündig mit Flattersatz rechts dargestellt. Mit der CSS-Eigenschaft `text-align:justify;` können Texte auch im Blocksatz ausgegeben werden. Da es dabei keine Silbentrennung gibt, entstehen – vor allem in engen Spalten mit langen Wörtern – hässliche Wortzwischenräume.

Blocksatz auf Webseiten ist allerdings nicht unumstritten. Linksbündiger Text, zusammen mit einer kurzen Zeilenlänge und grosszügigem Zeilenabstand soll zu einer besseren Lesbarkeit führen, weil so das Auge besser geführt wird und sich beim Sprung auf die nächste Zeile weniger schnell verirrt.

Beim Lesen von Texten auf dem Bildschirm ist der Abstand zwischen Auge und Text viel Grösser, als beim Lesen gedruckter Texte. Ausserdem wird kaum je der Finger als Lesehilfe auf dem Bildschirm verwendet. Um die Lesbarkeit von Bildschirmtexten zu erhöhen, ist es somit besser, diese linksbündig zu setzen. 

Trotzdem kann es unter bestimmten Umständen angebracht sein (z.B beim Ausdruck von Webseiten oder wenn es das CD vorschreibt), den Text im Blocksatz mit Silbentrennung zu setzen.

Aber auch in linksbündigem Text kann Silbentrennung praktisch sein: Um lange Wörter in engen Tabellenspalten umzubrechen oder um den Flattersatz zu «beruhigen».

== Automatische Silbentrennung ==
Die automatische Silbentrennung ist eine Herausforderung für die Informatik. Tatsächlich gibt es heute kein System, dass vollautomatisch *und* fehlerfrei funktioniert. Die voll-automatische Silbentrennung scheitert an mehreren Hindernissen:
  # Ein perfekter Algorithmus müsste für jede Sprache die passenden Trennregeln beherrschen.
  # Ein perfekter Algorithmus würde _auf Dokumentebene_ verhindern, dass mehrere Trennungen untereinander zu stehen kommen und dass es eine Trennung über einen Seitenwechsel gibt. Dies kann mittels Systemen, die mit Strafpunkten arbeiten, erreicht werden. Bei jeder Textänderung muss dann aber alles neu berechnet werden. Der Algorithmus müsste ausserdem die volle Kontrolle über das bruchteilgenaue setzen des Textes haben, um aus den vielen möglichen Kombinationen von Silbentrennstellen, optischem Randausgleich (=margin kerning o. character protrusion) und Font Expansion die unauffälligste heraus zu suchen.
  # Ein perfekter Algorithmus würde bei doppeldeutigen Wörtern auf _Satzebene_ aus dem Zusammenhang erschliessen können, wie getrennt werden muss: Die «Versendungen» in Gedichten oder die «Versendungen» von Gedichtsbänden?
  # Ein perfekter Algorithmus würde auf _Wortebene_ zwischen «guten» und «schlechten» Trennstellen (Silben-trennung, statt Silbentren-nung) unterscheiden und trotzdem einen schönen Blocksatz berechnen.

*Punkt 1* wird von den verschiedenen Textprogrammen unterschiedlich gut beherrscht. Microsoft Word bietet nur rudimentärste Kontrolle über die Silbentrennung. (Das Setzen von schönem Blocksatz ist mit diesem Stück Software ohnehin kaum möglich.)

[http://www.mnn.ch/hyph/img/Word_settings.png]

Etwas mehr Kontrolle bieten QuarkXPress und Adobe InDesign.

[http://www.mnn.ch/hyph/img/Quark_settings.png]

[http://www.mnn.ch/hyph/img/InDesign_settings.png]

Volle Automatisierung und zugleich Kontrolle bietet, soviel ich weiss, nur pdfTeX im Zusammenspiel mit dem Packet [http://www.ctan.org/tex-archive/macros/latex/contrib/microtype/ microtype].

*Punkt 2* wird noch immer dem Autor überlassen.

Für *Punkt 3* gibt es bereits [http://www.apm.tuwien.ac.at/research/SiSiSi/ Ansätze].

Zusammenfassend kann man sagen, dass es keinen perfekten Algorithmus gibt. Der Autor muss in jedem Fall das Resultat überprüfen und gegebenenfalls manuell nachbearbeiten.

Das folgende Bild zeigt die Resultate verschiedener Programme (bei InDesign ohne und mit optischem Randausgleich und bei LaTeX ohne und mit microtype):
[http://www.mnn.ch/hyph/img/Overview.png]

In den meisten Textverarbeitungsprogrammen werden lexikalische Algorithmen eingesetzt, die zu jedem zu trennenden Wort die Trennstellen und Wortbestandteile in einer Wörterliste nachschlagen. Wörter oder Wortbestandteile, die nicht auf der Liste sind, müssen aber vom Benutzer manuell getrennt werden. Der Nachteil dieses Ansatzes ist der hohe Speicherbedarf und der Umstand, dass Komposita nicht immer erkannt werden.

Eine andere Möglichkeit sind musterbasierte Algorithmen, welche versuchen aus einer Wörterliste Muster zu erkennen und davon Trennstellen ableiten. Der bekannteste Algorithmus stammt von Frankling Mark Liang ([http://www.tug.org/docs/liang/liang-thesis.pdf Word Hy-phen-a-tion by Com-put-er]), wurde 1983 entwickelt und wird seither in vielen Programmen wie LaTeX oder Openoffice verwendet. Musterbasierte Algorithmen können abhängig von der Länge der Musterliste ca 90% aller Trennstellen finden, wobei es aber auch zu schlechten, weil sinnverzerrenden Trennstellen kommen kann (Beispiel: bein-halten), welche wiederum manuell korrigiert werden müssen.

== Silbentrennung im Web heute ==
Im Web spielt die Silbentrennung bis heute kaum eine Rolle. Dies hat verschiedene Ursachen: 
  * Da es verschiedene Browser gibt, die je nach Einstellung durch den Nutzer Texte unterschiedlich darstellen, kann die Darstellung von Texten im HTML-Web vom Autor nicht abschliessend bestimmt werden; Zeilen werden je nach Schriftart und -grösse an unterschiedlichen Stellen umgebrochen.
  * Das «weiche Trennzeichen» (Soft Hyphen, Details siehe unten), wurde lange nicht von allen Browsern unterstützt. Firefox wird es als letzter Browser in der kommenden Version 3 (Gecko 1.9) als letzter Browser endlich unterstützen.
  * Die Auflösung der Bildschirme (72-140ppi) wächst zwar ständig, ist im Vergleich zu gedruckten Texten (300-600dpi) aber immer noch klein.


Der [http://edition-w3.de/TR/1999/REC-html401-19991224/struct/text.html#h-9.3.3 HTML401-Standard] besagt folgendes:

_In HTML gibt es zwei Typen von Trennzeichen: den normalen Trennstrich und das weiche Trennzeichen (soft hyphen). Der normale Trennstrich sollte von den Benutzerprogrammen wie jedes andere Zeichen behandelt werden. Das weiche Trennzeichen zeigt dem Benutzerprogramm, wo ein Zeilenumbruch auftreten kann._

_Diejenigen Browser, die weiche Trennzeichen interpretieren, müssen folgende Semantik beachten: Wenn eine Zeile an einem weichen Trennzeichen umgebrochen wird, muss ein Trennstrich am Ende der ersten Zeile stehen. Wenn eine Zeile an einem weichen Trennzeichen nicht umgebrochen wird, darf das Benutzerprogramm keinen Trennstrich ausgeben. Bei Operationen wie Suchen und Sortieren sollte das weiche Trennzeichen immer ignoriert werden._

_In HTML wird der normale Trennstrich durch das '-'-Zeichen (&#45; oder &#x2D;) repräsentiert. Das weiche Trennzeichen wird repräsentiert durch die Zeichen-Entity-Referenz &shy; (soft hyphen, &#173; oder &#xAD;)_

Der HTML-Standard schreibt also nicht vor, dass Browser das &shy;-Zeichen als Trennstelle erkennen müssen. Zur Zeit nehmen aber alle aktuellen Browser (Internet Explorer ab Verion 5, Safari 2, Opera ab Version 7.1) ausser Firefox 2.0 Trennungen vor.
(Update vom 5.7.2007: Die zukünftige Browserengine von Firefox, Gecko 1.9 unterstützt &shy; seit dem [http://www.mozilla.org/projects/firefox/3.0a6/releasenotes/ sechsten Alpha-Release]. Diese Entwicklungen werden in Firefox 3.0 integriert.)
Die Trennstellen (&shy;) muss der Autor aber manuell einfügen.

Der grosse Nachteil der vorgängigen Trennung mit &shy; ist, dass Wörter, welches dieses Sonderzeichen enthalten, in allen Browsern von Suchfunktionen nicht mehr gefunden werden.
Ich gehe davon aus, dass auch Suchmaschinen solche Wörter nicht indizieren.

== Silbentrennung im Web morgen ==
Mit [http://www.w3.org/TR/css3-text/#hyphenate CSS 3] (heute ist CSS 2.1 aktuell), wird es möglich sein, das Trennungsverhalten von Textabsätzen mittels CSS zu steuern. Aber auch hier wird nicht vorgeschrieben, dass Browser diese Silbentrennung vornehmen müssen.

== Zusammenfassung ==
Silbentrennung im Web ist nicht so wichtig, da der Blocksatz ohnehin keinen hohen Stellenwert hat. Trotzdem kann sie – auch im Flattersatz – bei schmalen Spalten nötig bzw. hilfreich sein. Silbentrennungen müssen zur Zeit vom Autor manuell mit dem Sonderzeichen &shy; vorgenommen werden, welches aber vom Firefox derzeit nicht unterstützt wird. Eine automatische browserseitige Silbentrennung für HTML gibt es bislang nicht.

== Wie weiter? ==
Mit der kommenden Version 3.0 wird auch Firefox &shy; unterstützen. Eine Automatisierung der Silbentrennung wird deshalb immer interessanter. Bis die Browser selbst eine Silbentrennung integriert haben, muss diese entweder beim Schreiben der Texte (durch den Texteditor), vor dem Ausliefern auf dem Server (mittels CGI-Skript) oder im Browser (Javascript) vorgenommen werden.

Eine Umsetzung in Javascript hat den Vorteil, dass die Silbentrennung den Text für Suchfunktionen nicht a priori unleserlich macht und vom Benutzer ein- oder ausgeschaltet werden kann.

Der [http://code.google.com/p/hyphenator/wiki/2AutomatischeSilbentrennungMitJS zweite Teil] dieses Artikels befasst sich mit der Implementierung einer automatischen Silbentrennung in Javascript.