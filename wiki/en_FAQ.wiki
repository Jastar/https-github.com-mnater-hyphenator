#summary Frequently asked questions

= FAQ =
== Shouldn't hyphenation be done on the server side? ==
There are some arguments against client side hyphenation - true. It costs a lot of computing time and the patterns have to be loaded for each language, everytime.
But I believe that hyphenation belongs to the client:
  * Only the client «knows» where to break a line (and if at all).
  * A html file that has been hyphenated on the server would be full of &shy;'s. That's ugly and nobody knows how that would be treated by search engines…
  * Hyphenation on the client can be turned off to work around copy&paste- and search-bugs in most browsers.
  * as JavaScript-engines are in focus of development, they become faster and faster.
  * there are billions of mostly underworked clients vs. millions of often overloaded servers.

== Hyphenator breaks the search functionality of my browser ==
Your browser has a bug (currently, only Firefox3 finds hyphenated words). So I don't want/can't fix this in Hyphenator.js.
The only thing we can do is to turn hyphenation off before searching.

== When I copy/paste hyphenated texts from a website, spaces/hyphens are inserted in allmost all words ==
This is fixed since version 3.0.0. Make sure that the option `safecopy` is set to `true`.

== Hyphenator.js does NOT work in Firefox 2 ==
Hyphenator.js infact works great in Firefox 2, but (apart from breaking urls) there's no effect since Firefox 2 does not support the soft hyphen (&shy;). If you can't be without, there's a script (external, no warranty and no support by me) that replaces the soft hyphens by spans in Firefox: [http://cheerleader.yoz.com/archives/000224.html].

== I want to set a value for the minimum of letters that remain on the old line/come to the new line. ==
In CSS3 are parameters hyphenate-before and hyphenate-before. These setting are made per language in the pattern files. You'll have to change them there.

== Could you write an extension/plugin for … ==
Maybe I could. But
  # to maintain Hyphenator.js is enough for the moment and
  # there are so many CMSs, Blogs and other Frameworks out there, I wouldn't know where to begin.
The coolest thing is, when YOU decide to write a plugin or whatever for your favorite environment, based on Hyphenator.js.
If you need a special feature, send me an e-mail, We'll found a solution.

== Why are the pattern files so different in size? ==
Patterns depend highly on linguistics and grammar of the respective language. Where it seems (I suppose) to be enough for some Indian languages to break a word after some special characters the hyphenation rules for german are quite complex.

== !JavaScript is insecure and evil. It should be turned off in every browser! ==
Welcome to Web 2.0, the world of AJAX and modern browsers!
It's true, !JavaScript had a very bad reputation - not because JavaScript itself is bad, but because of a very poor implementation in some browsers. As of today JavaScripts influence is growing and browser developers put a lot of work in making their JavaScript engines better, secure and really fast. There are a lot of webpages using JavaScript in a good manner.
Further, Hyphenator.js follows the rules of *[http://en.wikipedia.org/wiki/Unobtrusive_JavaScript unobtrusive JavaScript]*.

== How about Accessibility? ==
Following the rules of *[http://en.wikipedia.org/wiki/Unobtrusive_JavaScript unobtrusive JavaScript]* Hyphenator.js has AFAIK no influence on accessibility of your webpage. It just adds a feature that will not be missed by a screen reader.

Some screen readers have issues with words that contain soft hyphens (they read syllables instead of words). Please note that this is not an issue of Hyphenator but a bug in the screen reader. Please contact the makers of the screen reader application.

== How to hyphenate text that has been loaded with AJAX? ==
The simple answer is: just call Hyphenator.run() again.
The problem with this is, that Hyphenator.js will process the whole file again (and not just the reloaded text).
Instead you can redefine `selectorfunction` in a way that it just returns the elements that have been loaded by AJAX.
I've created a testcase (http://hyphenator.googlecode.com/svn/trunk/testsuite/test44.html) where you can have a look how this works (using jQuery).
Here's the code:
{{{
<script src="http://ajax.googleapis.com/ajax/libs/jquery/1.3.2/jquery.min.js" type="text/javascript"></script>
<script src="../Hyphenator.js" type="text/javascript"></script>
<script type="text/javascript">
	Hyphenator.config({
		hyphenchar:'|'
	});
	Hyphenator.run();
	function insert()  {
		$("#target").load("test44inc.html",'',cb);
	}
	function cb () {
		Hyphenator.config({
			selectorfunction: function(){
				return $("#target").get();
			}
		});
		Hyphenator.run();
	}
</script>
}}}

== Can I use hyphenator.js in a frameset? ==
Yes, this feature is new in version 3.0.0 but turned off by default. You can turn it on with the option `doframes`.
Due to the [http://en.wikipedia.org/wiki/Same_origin_policy Same Origin Policy] only frames with the same origin can be hyphenated.