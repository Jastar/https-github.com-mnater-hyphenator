<project name="Hyphenator" default="finalize" basedir=".">

	<property name="version" value="4.0.0beta" />
	<property name="src" value="${basedir}/src" />
	<property name="src_patterns" value="${src}/patterns" />
	<property name="src_testsuite" value="${src}/testsuite" />
	<property name="build" value="${basedir}/build" />
	<property name="dist" value="${basedir}/dist" />
	<property name="dist_patterns" value="${dist}/patterns" />
	<property name="dist_testsuite" value="${dist}/testsuite" />
	<property name="tmp" value="${basedir}/tmp" />
	
	<property name="Hd" value="Hyphenator.js" />
	<property name="Hdm" value="Hyphenator_min.js" />
	
	
	<filelist id="srcfiles" dir="${src}">
		<file name="head.js" />
		<file name="main.js" />
		<file name="debug.js" /> 
		<file name="quirks.js" /> 
		<file name="DOM.js" /> 
		<file name="constants.js" /> 
		<file name="messages.js" />
		<file name="storage.js" /> 
		<file name="toggleBox.js" /> 
		<file name="config.js" /> 
		<file name="languages.js" /> 
		<file name="loader.js" /> 
		<file name="hyphenate.js" /> 
		<file name="i18n.js" />
		<file name="bookmarklet.js" />
		</filelist>

	<fileset id="patternfiles" dir="${src_patterns}" />


	<target name="finalize" depends="min"> 
		<!--<delete dir="${tmp}" />-->
	</target>
	
	<target name="min" depends="assemble" description="Minify with Google Closure Compiler" if="runGCC">
		<echo message="Building ${Hdm}" />
		<apply executable="java" parallel="false" verbose="true" dest="${dist}">
			<fileset dir="${dist}">
				<include name="${Hd}" />
				<!--<include name="/patterns/de.js" />-->
			</fileset>
			<arg line="-jar" />
			<arg path="build/compiler.jar" />
		
			<arg value="--compilation_level" />
			<arg value="SIMPLE_OPTIMIZATIONS" />
			
			<arg value="--warning_level" />
			<arg value="VERBOSE" />

			<arg value="--charset" />
			<arg value="UTF-8" />

			<arg value="--js_output_file" />
			<targetfile />

			<arg value="--js" />
			<mapper type="glob" from="${Hd}" to="${Hdm}" />
		</apply>
		<echo message="${Hdm} built." />
	</target>

	<target name="assemble" depends="lint">
		<echo message="Building ${Hd}" />
		<concat destfile="${dist}/${Hd}" encoding="UTF8">
			<filelist refid="srcfiles" />
		</concat>
		<echo message="${Hd} built." />
		<echo message="Copying pattern files" />
		<copy todir="${dist_patterns}">
			<fileset dir="${src_patterns}" />
		</copy>
		<echo message="Copying testsuite" />
		<copy todir="${dist_testsuite}">
			<fileset dir="${src_testsuite}" />
		</copy>
	</target>

	<target name="lint" depends="init" description="Check each module with JSLint" if="runlint">
		<parallel>
		<java jar="${build}/js.jar" fork="true">
			<arg value= "${build}/jslint-check-src.js" />
		</java>
		<!--<java jar="${build}/js.jar" fork="true">
			<arg value= "${build}/jslint-check-pattern.js" />
		</java>-->
		</parallel>
	</target>

	<target name="init">
		<tstamp/>
		<mkdir dir="${dist}"/>
		<mkdir dir="${dist_patterns}" />
		<mkdir dir="${dist_testsuite}" />
		<mkdir dir="${tmp}"/>

		<pathconvert property="srcfiles" refid="srcfiles">
			<map from="${basedir}/" to="" />
		</pathconvert>
		<echo file="${tmp}/srcfiles.txt" message="${srcfiles}" />

		<pathconvert property="patternfiles" refid="patternfiles">
			<map from="${basedir}/" to="" />
		</pathconvert>
		<echo file="${tmp}/patternfiles.txt" message="${patternfiles}" />
		
	</target>

</project>
<!--
run with:
:!ant
:!ant -Drunlint=true
:!ant -Drunlint=true -DrunGCC=true > log.txt
--> 
